/* 扩展 :extend */
h2{
    &:extend(.style);
    font-style: italic;
}
.style{
    background: green;
}

/* 混合 minin */
.p1{
  color:red;
}
.p2{
  background : #64d9c0;
  .p1();
}
.p3{
   background : #DAA520;
  .p1;
}
/* 可以创建一个mixin，它可以通过简单地放置括号后在输出中消失。 */
.a(){
  padding-left: 100px;
}
.myclass{
  background : #64d9c0;
  .a;
}
/* mixins不仅可以包含属性，还可以包含选择器。 */
.mixin() {
  &:hover {
    background: #FFC0CB;
  }
}
.a2 {
  .mixin();
}
/* 命名空间用于在通用名称下对mixin进行分组。 使用命名空间可以避免名称冲突，并从外部封装mixin组。 */
#outer() {
  background:yellow;
  .inner {
    color: red;
  }
}
p {
  #outer > .inner;
}
/* 当guard应用于命名空间时，只有在guard条件返回true时才使用由命名空间定义的mixin。 命名空间防护类似于mixins上的guard。 */
@import "lib.less";
#namespace when (@color = blue) {
  .mixin() {
   color: red;
  }
}
p{
 #namespace .mixin();
}
/* ！important 关键字用于覆盖特定属性。 当它在mixin调用之后放置时，它会将所有继承的属性标记为！important 。 */
.mixin11(){
  color: #900;
  background: #F7BE81;
}
.para1{
  .mixin11();
}
.para2{
  .mixin11() !important;
}

/* 混合参数 */
.border(@width; @style; @color) {
    border: @width @style @color;
}

.myheader {
    .border(2px; dashed; green);
}

/* Mixins具有多个参数 */
.mixin12(@color) {
  color: @color;
}
.mixin12(@color; @padding: 2,4) {
  color: @color;
  padding: @padding;
}

.myclass {
  .mixin12(#FE9A2E;5,10);
}

/* @arguments 包括所有传递的参数 */
.box-shadow(@x: 0; @y: 0; @height: 3px; @width: 3px) {
  -webkit-box-shadow: @arguments;
     -moz-box-shadow: @arguments;
          box-shadow: @arguments;
}
.myclass {
  .box-shadow(2px; 2px);
}
/* 模式匹配 */
.mixin13(dark; @color) {
  color: darken(@color, 15%);
}
.mixin13(light; @color) {
  color: lighten(@color, 15%);
}

@color-new: dark;//light

.line {
  .mixin13(@color-new; #FF0000);
}